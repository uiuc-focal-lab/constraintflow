def Shape as (Float l, Float u, PolyExp L, PolyExp U){[(curr[l]<=curr),(curr[u]>=curr),(curr[L]<=curr),(curr[U]>=curr)]};

func priority(Neuron n) = n[layer];
func create_c(Neuron n, PolyExp e) = n == e;

transformer ibp(curr, prev, curr_list){
    rev_Maxpool -> (curr[l], min(curr[u], sum(prev[u])), max(curr[l],sum(prev[u])), curr[U]);
}

flow(backward, priority, true, ibp);