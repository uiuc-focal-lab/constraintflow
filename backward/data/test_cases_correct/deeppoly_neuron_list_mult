def Shape as (Float l, Float u, PolyExp L, PolyExp U){[(curr[l]<=curr),(curr[u]>=curr), (curr[L]<=curr), (curr[U]>=curr)]};

func simplify_lower(Neuron n, Float coeff) = (coeff >= 0) ? (coeff * n[l]) : (coeff * n[u]);
func simplify_upper(Neuron n, Float coeff) = (coeff >= 0) ? (coeff * n[u]) : (coeff * n[l]);

func find_min(Neuron List n1, Neuron List n2) = sum(min([n1[l]*n2[l], n1[l]*n2[u], n1[u]*n2[l], n1[u]*n2[u]]));
func find_max(Neuron List n1, Neuron List n2) = sum(max([n1[l]*n2[l], n1[l]*n2[u], n1[u]*n2[l], n1[u]*n2[u]]));

func priority(Neuron n) = n[layer];


transformer deeppoly{
    Neuron_list_mult -> (find_min(prev_0, prev_1), find_max(prev_0, prev_1), find_min(prev_0, prev_1), find_max(prev_0, prev_1));
}

flow(forward, priority, true, deeppoly);