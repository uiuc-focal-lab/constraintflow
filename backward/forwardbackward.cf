def Shape as (Float l, Float u, PolyExp L, PolyExp U){[(curr[l]<=curr),(curr[u]>=curr),(curr[L]<=curr),(curr[U]>=curr)]};

func priority(Neuron n) = n[layer];
func create_c(Neuron n, PolyExp e) = n == e;

func simplify_lower(Neuron n, Float coeff) = (coeff >= 0) ? (coeff * n[l]) : (coeff * n[u]);
func simplify_upper(Neuron n, Float coeff) = (coeff >= 0) ? (coeff * n[u]) : (coeff * n[l]);

func replace_lower(Neuron n, Float coeff) = (coeff >= 0) ? (coeff * n[L]) : (coeff * n[U]);
func replace_upper(Neuron n, Float coeff) = (coeff >= 0) ? (coeff * n[U]) : (coeff * n[L]);

func priority2(Neuron n) = -n[layer];

func backsubs_lower(PolyExp e, Neuron n) = (e.traverse(backward, priority2, true, replace_lower){e <= n}).map(simplify_lower);
func backsubs_upper(PolyExp e, Neuron n) = (e.traverse(backward, priority2, true, replace_upper){e >= n}).map(simplify_upper);

func f(Neuron n1, Neuron n2) = n1[l] >= n2[u];

transformer fw(curr, prev){
    Maxpool -> (max(prev[l]), max(prev[u]), len(argmax(prev, f)) > 0 ? avg(argmax(prev, f)) : max(prev[l]), len(argmax(prev, f)) > 0 ? avg(argmax(prev, f)) : max(prev[u]));
    Affine -> (backsubs_lower(prev.dot(curr[weight]) + curr[bias], curr), backsubs_upper(prev.dot(curr[weight]) + curr[bias], curr), prev.dot(curr[weight]) + curr[bias], prev.dot(curr[weight]) + curr[bias]);
    Relu -> (sum(prev[l]) >= 0) ? (sum(prev[l]), sum(prev[u]), sum(prev), sum(prev)) : ((sum(prev[u]) <= 0) ? (0, 0, 0, 0) : (0, sum(prev[u]), 0, ((sum(prev[u]) / (sum(prev[u]) - sum(prev[l]))) * sum(prev)) - ((sum(prev[u]) * sum(prev[l])) / (sum(prev[u]) - sum(prev[l]))) ));
}


transformer bw(curr, prev, curr_list){
    rev_Relu -> sum(prev[l]) > 0 ? (sum(prev[u]) >= 0 ? (max(sum(prev[l]), curr[l]), min(sum(prev[u]), curr[u]), curr[L], curr[U]) : (max(sum(prev[l]), curr[l]),curr[u], curr[L], curr[U])) : (sum(prev[u]) >= 0 ? (curr[l], min(sum(prev[u]), curr[u]), curr[L], curr[U]) : (curr[l], curr[u], curr[L], curr[U]));
    rev_Affine -> (lp(minimize, curr, (curr[equations].map_list(create_c curr))), lp(maximize, curr, (curr[equations].map_list(create_c curr))), curr[L], curr[U]);
    rev_Maxpool -> (curr[l], min(curr[u], sum(prev[u])), curr[L], curr[U]);
}


flow(forward, priority, true, fw);
flow(backward, priority, true, bw);
