def Shape as (Float l, Float u, ZonoExp z, Ct c){[(curr[l]<=curr),(curr[u]>=curr),(curr In curr[z]),curr[c]]};

func simplify_lower(Neuron n, Float coeff) = (coeff >= 0) ? (coeff * n[l]) : (coeff * n[u]);
func simplify_upper(Neuron n, Float coeff) = (coeff >= 0) ? (coeff * n[u]) : (coeff * n[l]);

func priority(Neuron n) = n[layer];
func foo(Neuron n) = n[c];

transformer zono(curr, prev){
    Affine -> (lp(minimize, prev.dot(curr[weight]) + curr[bias], prev.map_list(foo)), lp(maximize, prev.dot(curr[weight]) + curr[bias], prev.map_list(foo)), prev[z].dot(curr[weight]) + (curr[bias]), (prev.dot(curr[weight]) + curr[bias]) == curr);
}

flow(forward, priority, true, zono);