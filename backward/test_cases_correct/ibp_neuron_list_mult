def Shape as (Float l, Float u){[(curr[l]<=curr),(curr[u]>=curr)]};

func simplify_lower(Neuron n, Float coeff) = (coeff >= 0) ? (coeff * n[l]) : (coeff * n[u]);
func simplify_upper(Neuron n, Float coeff) = (coeff >= 0) ? (coeff * n[u]) : (coeff * n[l]);

func priority(Neuron n) = n[layer];


transformer ibp{
    Neuron_list_mult -> (sum(min([prev_0[l]*prev_1[l], prev_0[l]*prev_1[u], prev_0[u]*prev_1[l], prev_0[u]*prev_1[u]])), sum(max([prev_0[l]*prev_1[l], prev_0[l]*prev_1[u], prev_0[u]*prev_1[l], prev_0[u]*prev_1[u]])));
}

flow(forward, priority, true, ibp);