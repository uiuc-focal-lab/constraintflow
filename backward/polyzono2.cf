def Shape as (Float l, Float u, PolyExp L, PolyExp U, ZonoExp z){[curr[l]<=curr,curr[u]>=curr,curr[L]<=curr,curr[U]>=curr,curr In curr[z]]};

func simplify_lower(Neuron n, Float coeff) = (coeff >= 0) ? (coeff * n[l]) : (coeff * n[u]);
func simplify_upper(Neuron n, Float coeff) = (coeff >= 0) ? (coeff * n[u]) : (coeff * n[l]);

func replace_lower(Neuron n, Float coeff) = (coeff >= 0) ? (coeff * n[L]) : (coeff * n[U]);
func replace_upper(Neuron n, Float coeff) = (coeff >= 0) ? (coeff * n[U]) : (coeff * n[L]);

func priority(Neuron n) = n[layer];
func priority2(Neuron n) = -n[layer];

func backsubs_lower(PolyExp e, Neuron n) = (e.traverse(backward, priority2, true, replace_lower){e <= n}).map(simplify_lower);
func backsubs_upper(PolyExp e, Neuron n) = (e.traverse(backward, priority2, true, replace_upper){e >= n}).map(simplify_upper);

func f(Neuron n1, Neuron n2) = n1[l] >= n2[u];

transformer deeppoly(curr, prev){
    Affine -> (max((prev.dot(curr[weight]) + curr[bias]).map(simplify_lower),backsubs_lower(prev.dot(curr[weight]) + curr[bias], curr)), min((prev.dot(curr[weight]) + curr[bias]).map(simplify_upper),backsubs_upper(prev.dot(curr[weight]) + curr[bias], curr)), prev.dot(curr[weight]) + curr[bias], prev.dot(curr[weight]) + curr[bias], prev[z].dot(curr[weight]) + curr[bias]);

    Maxpool -> (max(prev[l]), max(prev[u]), len(argmax(prev, f)) > 0 ? avg(argmax(prev, f)) : max(prev[l]), len(argmax(prev, f)) > 0 ? avg(argmax(prev, f)) : max(prev[u]), ((max(prev[u]) + max(prev[l])) / 2) + (((max(prev[u]) - max(prev[l])) / 2) * eps));

    Relu -> (sum(prev[l]) >= 0) ? (sum(prev[l]), sum(prev[u]), sum(prev), sum(prev), sum(prev[z])) : ((sum(prev[u]) <= 0) ? (0, 0, 0, 0, 0) : (0, sum(prev[u]), 0, ((sum(prev[u]) / (sum(prev[u]) - sum(prev[l]))) * sum(prev)) - ((sum(prev[u]) * sum(prev[l])) / (sum(prev[u]) - sum(prev[l]))), (sum(prev[u]) / 2) + ((sum(prev[u]) / 2) * eps)));
}

flow(forward, priority, true, deeppoly);