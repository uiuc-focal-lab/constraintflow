def Shape as (Float l, Float u, PolyExp L, PolyExp U){[(curr[l]<=curr),(curr[u]>=curr),(curr[L]<=curr),(curr[U]>=curr)]};

func priority(Neuron n) = n[layer];
func create_c(Neuron n, PolyExp e) = n == e;

transformer vegas{
    rev_Relu -> 
    (prev[l]) > 0 ? 
    (
        (prev[u]) >= 0 ? 
        (max((prev[l]), curr[l]), min((prev[u]), curr[u]), curr[L], curr[U]) : 
        (max((prev[l]), curr[l]),curr[u], curr[L], curr[U])
    ) : 
    (
        (prev[u]) >= 0 ? 
        (curr[l], min((prev[u]), curr[u]), curr[L], curr[U]) : 
        (curr[l], curr[u], curr[L], curr[U])
    );
}

flow(backward, priority, true, vegas);





