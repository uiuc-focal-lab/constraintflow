def Shape as (Float l, Float u, PolyExp L, PolyExp U, PolyExp Lc, PolyExp Uc)
{[(curr[l]<=curr),(curr[u]>=curr),(curr[L]<=curr),(curr[U]>=curr),(curr[Lc]<=curr),(curr[Uc]>=curr)]};


func simplify_lower(Neuron n, Float coeff) = (coeff >= 0) ? (coeff * n[l]) : (coeff * n[u]);
func simplify_upper(Neuron n, Float coeff) = (coeff >= 0) ? (coeff * n[u]) : (coeff * n[l]);

func replace_lower(Neuron n, Float coeff) = (coeff >= 0) ? (coeff * n[L]) : (coeff * n[U]);
func replace_upper(Neuron n, Float coeff) = (coeff >= 0) ? (coeff * n[U]) : (coeff * n[L]);

func replace_lower2(Neuron n, Float coeff) = (coeff >= 0) ? (coeff * n[Lc]) : (coeff * n[Uc]);
func replace_upper2(Neuron n, Float coeff) = (coeff >= 0) ? (coeff * n[Uc]) : (coeff * n[Lc]);

func priority(Neuron n) = n[layer];
func priority2(Neuron n) = -n[layer];

func stop(Neuron n, Float coeff) = true ;

func backsubs_lower(PolyExp e, Neuron n) = (e.traverse(backward, priority2, stop, replace_lower){e <= n});
func backsubs_upper(PolyExp e, Neuron n) = (e.traverse(backward, priority2, stop, replace_upper){e >= n});


func f(Neuron n1, Neuron n2) = n1[l] >= n2[u];

transformer deeppoly{
    Affine -> (backsubs_lower(prev.dot(curr[weight]) + curr[bias], curr).map(simplify_lower), backsubs_upper(prev.dot(curr[weight]) + curr[bias], curr).map(simplify_upper), prev.dot(curr[weight]) + curr[bias], prev.dot(curr[weight]) + curr[bias], (prev.dot(curr[weight]) + curr[bias]).map(replace_lower2), (prev.dot(curr[weight]) + curr[bias]).map(replace_upper2));
}

flow(forward, priority, true, deeppoly);