def Shape as (Float l, Float u, PolyExp L, PolyExp U){[(curr[l]<=curr),(curr[u]>=curr),(curr[L]<=curr),(curr[U]>=curr)]};

func simplify_lower(Neuron n, Float coeff) = (coeff >= 0) ? (coeff * n[l]) : (coeff * n[u]);
func simplify_upper(Neuron n, Float coeff) = (coeff >= 0) ? (coeff * n[u]) : (coeff * n[l]);

func replace_lower(Neuron n, Float coeff) = (coeff >= 0) ? (coeff * n[L]) : (coeff * n[U]);
func replace_upper(Neuron n, Float coeff) = (coeff >= 0) ? (coeff * n[U]) : (coeff * n[L]);

func priority(Neuron n) = n[layer];
func priority2(Neuron n) = -n[layer];

func backsubs_lower(PolyExp e) = ((e.map(replace_lower)).map(replace_lower)).map(simplify_lower);
func backsubs_upper(PolyExp e) = ((e.map(replace_upper)).map(replace_upper)).map(simplify_upper);


func f(Neuron n1, Neuron n2) = n1[l] >= n2[u];

transformer deeppoly{
    Affine -> (backsubs_lower(prev.dot(curr[weight])) + curr[bias], backsubs_upper(prev.dot(curr[weight])) + curr[bias], prev.dot(curr[weight]) + curr[bias], prev.dot(curr[weight]) + curr[bias]);
}

flow(forward, priority, true, deeppoly);