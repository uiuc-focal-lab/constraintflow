def Shape as (Float l, Float u, PolyExp L, PolyExp U, PolyExp Lc, PolyExp Uc)
{[(curr[l]<=curr),(curr[u]>=curr),(curr[L]<=curr),(curr[U]>=curr),(curr[Lc]<=curr),(curr[Uc]>=curr)]};

func priority(Neuron n) = n[layer];

func s1(Float x1, Float x2) = ((x1 * (x1 + 3))-(x2 * (x2 + 3))) / (6 * (x1-x2));
func i1(Float x1, Float x2) = x1 * ((x1 + 3) / 6) - (s1(x1, x2) * x1);

func f(Float x) = x < 3 ? x * ((x + 3) / 6) : x;
func f2(Float x) = x * ((x + 3) / 6);

transformer deeppoly{
    HardSwish -> (prev[l] <= -3) ? 
                    (prev[u] <= -3 ? 
                        (0, 0, 0, 0, 0, 0) : 
                        (prev[u] <= 0 ? 
                            (-3/8, 0, -3/8, 0, -3/8, 0) : 
                            (-3/8, f(prev[u]), -3/8, f(prev[u]) * (prev - prev[l]), -3/8, f(prev[u]) * (prev[Uc] - prev[l])))) : 
                    ((prev[l] <= 3) ? 
                        ((prev[u] <= 3) ? 
                            (-3/8, max(f2(prev[l]), f2(prev[u])), -3/8, s1(prev[u], prev[l]) * prev + i1(prev[u], prev[l]), -3/8, max(f2(prev[l]), f2(prev[u]))) : 
                            (-3/8, prev[u], -3/8, prev[u] * ((prev + 3) / (prev[u] + 3)), -3/8, prev[u] * ((prev[Uc] + 3) / (prev[u] + 3)))) :
                        (prev[l], prev[u], prev, prev, prev, prev)); 
}


flow(forward, priority, true, deeppoly);