def Shape as (Float l, Float u, Float b, ZonoExp z){[curr[b] >= 0, curr[l] <= curr, curr[u] >= curr, curr In (curr[z] + (curr[b]*eps))]};

func simplify_lower(Noise n, Float coeff) = (coeff >= 0) ? (coeff * (-1)) : (coeff * 1);
func simplify_upper(Noise n, Float coeff) = (coeff >= 0) ? (coeff * 1) : (coeff * (-1));

func compute_min(Neuron n) = n[z].map(simplify_lower) - n[b];
func compute_max(Neuron n) = n[b] + n[z].map(simplify_upper);

func priority(Neuron n) = n[layer];
func relu6(Float r) = r >= 0 ? (r <= 6 ? r : 6) : 0;

func abs(Float x) = x > 0 ? x : -1*x;

transformer zono_box{
    Relu6 -> (relu6(prev[l]), relu6(prev[u]), relu6(prev[u]), 0);
}

flow(forward, priority, true, zono_box);