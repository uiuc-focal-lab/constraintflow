def Shape as (Float l, Float u, ZonoExp z, Ct c){[(curr[l]<=curr),(curr[u]>=curr),(curr In curr[z]),curr[c]]};

func priority(Neuron n) = n[layer];

func s1(Float x1, Float x2) = ((x1 * (x1 + 3))-(x2 * (x2 + 3))) / (6 * (x1-x2));
func i1(Float x1, Float x2) = x1 * ((x1 + 3) / 6) - (s1(x1, x2) * x1);

func f(Float x) = x < 3 ? x * ((x + 3) / 6) : x;
func f2(Float x) = x * ((x + 3) / 6);

transformer zono{
    HardSwish -> (prev[l] < -3) ? 
                    (prev[u] < -3 ? 
                        (0, 0, 0, curr==0) : 
                        (prev[u] < 0 ? 
                            (-3/8, 0, (-3/16) * (1 - eps), ((curr >= (-3/8)) and (curr <= 0))) : 
                            (-3/8, f(prev[u]), (f(prev[u])/2 - (3/16)) + ((f(prev[u])/2 + (3/16)) * eps), ((curr >= (-3/8)) and (curr <= f(prev[u]))) ))) : 
                    ((prev[l] < 3) ? 
                        ((prev[u] < 3) ? 
                            (-3/8, max(f2(prev[l]), f2(prev[u])), ((max(f2(prev[l]), f2(prev[u]))/2 )- (3/16)) + (eps * (max(f2(prev[l]), f2(prev[u]))/2 + (3/16))), ((curr >= (-3/8)) and (curr <= max(f2(prev[l]), f2(prev[u]))))) : 
                            (-3/8, prev[u], (prev[u]/2 - (3/16)) + (eps * (prev[u]/2 + (3/16))), ((curr >= (-3/8)) and (curr <= prev[u])) )) :
                        (prev[l], prev[u], prev[z], curr==prev)); 
}


flow(forward, priority, true, zono);