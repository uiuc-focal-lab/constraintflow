def Shape as (Float l, Float u, PolyExp L, PolyExp U, PolyExp Lc, PolyExp Uc)
{[(curr[l]<=curr),(curr[u]>=curr),(curr[L]<=curr),(curr[U]>=curr),(curr[Lc]<=curr),(curr[Uc]>=curr)]};

func simplify_lower(Neuron n, Float coeff) = (coeff >= 0) ? (coeff * n[l]) : (coeff * n[u]);
func simplify_upper(Neuron n, Float coeff) = (coeff >= 0) ? (coeff * n[u]) : (coeff * n[l]);

func replace_lower(Neuron n, Float coeff) = (coeff >= 0) ? (coeff * n[L]) : (coeff * n[U]);
func replace_upper(Neuron n, Float coeff) = (coeff >= 0) ? (coeff * n[U]) : (coeff * n[L]);

func replace_lower2(Neuron n, Float coeff) = (coeff >= 0) ? (coeff * n[Lc]) : (coeff * n[Uc]);
func replace_upper2(Neuron n, Float coeff) = (coeff >= 0) ? (coeff * n[Uc]) : (coeff * n[Lc]);

func priority(Neuron n) = n[layer];
func priority2(Neuron n) = -n[layer];

func backsubs_lower(PolyExp e, Neuron n) = (e.traverse(backward, priority2, true, replace_lower){e <= n}).map(simplify_lower);
func backsubs_upper(PolyExp e, Neuron n) = (e.traverse(backward, priority2, true, replace_upper){e >= n}).map(simplify_upper);

func f(Neuron n1, Neuron n2) = n1[l] >= n2[u];
func s1(Float x1, Float x2) = ((x1 * (x1 + 3))-(x2 * (x2 + 3))) / (6 * (x1-x2));
func i1(Float x1, Float x2) = x1 * ((x1 + 3) / 6) - (s1(x1, x2) * x1);

func f1(Float x) = x < 3 ? x * ((x + 3) / 6) : x;
func f2(Float x) = x * ((x + 3) / 6);

transformer CertCached{
    Affine -> (backsubs_lower(prev.dot(curr[weight]) + curr[bias], curr).map(simplify_lower), backsubs_upper(prev.dot(curr[weight]) + curr[bias], curr).map(simplify_upper), prev.dot(curr[weight]) + curr[bias], prev.dot(curr[weight]) + curr[bias], (prev.dot(curr[weight]) + curr[bias]).map(replace_lower2), (prev.dot(curr[weight]) + curr[bias]).map(replace_upper2));
    Maxpool -> len(argmax(prev, f)) > 0 ? 
                (max(prev[l]), max(prev[u]), avg(argmax(prev, f)), avg(argmax(prev, f)), avg(argmax(prev, f)[Lc]), avg(argmax(prev, f)[Uc])) : 
                (max(prev[l]), max(prev[u]), max(prev[l]), max(prev[u]), max(prev[l]), max(prev[u]));
    Relu -> ((prev[l]) >= 0) ? 
                ((prev[l]), (prev[u]), (prev), (prev), (prev[Lc]), (prev[Uc])) : 
                (((prev[u]) <= 0) ? 
                    (0, 0, 0, 0, 0, 0) : 
                    (0, (prev[u]), 0, (((prev[u]) / ((prev[u]) - (prev[l]))) * (prev)) - (((prev[u]) * (prev[l])) / ((prev[u]) - (prev[l]))), 0, (((prev[u]) / ((prev[u]) - (prev[l]))) * (prev[Uc])) - (((prev[u]) * (prev[l])) / ((prev[u]) - (prev[l]))) ));

    Abs -> ((prev[l]) >= 0) ? 
                ((prev[l]), (prev[u]), (prev), (prev), (prev[Lc]), (prev[Uc])) : 
                (((prev[u]) <= 0) ? 
                    (-prev[u], -prev[l], -prev, -prev, -prev[Uc], -prev[Lc]) : 
                    (0, max(-prev[l], prev[u]), 0, prev*(prev[u]+prev[l])/(prev[u]-prev[l]) - (((2*prev[u])*prev[l])/(prev[u]-prev[l])), 0, ((-prev[l])>prev[u] ? prev[Lc] : prev[Uc])*(prev[u]+prev[l])/(prev[u]-prev[l]) - (((2*prev[u])*prev[l])/(prev[u]-prev[l]))));

    HardSwish -> (prev[l] <= -3) ? 
                    (prev[u] <= -3 ? 
                        (0, 0, 0, 0, 0, 0) : 
                        (prev[u] <= 0 ? 
                            (-3/8, 0, -3/8, 0, -3/8, 0) : 
                            (-3/8, f1(prev[u]), -3/8, f1(prev[u]) * (prev - prev[l]), -3/8, f1(prev[u]) * (prev[Uc] - prev[l])))) : 
                    ((prev[l] <= 3) ? 
                        ((prev[u] <= 3) ? 
                            (-3/8, max(f2(prev[l]), f2(prev[u])), -3/8, s1(prev[u], prev[l]) * prev + i1(prev[u], prev[l]), -3/8, max(f2(prev[l]), f2(prev[u]))) : 
                            (-3/8, prev[u], -3/8, prev[u] * ((prev + 3) / (prev[u] + 3)), -3/8, prev[u] * ((prev[Uc] + 3) / (prev[u] + 3)))) :
                        (prev[l], prev[u], prev, prev, prev, prev)); 
}

flow(forward, priority, true, CertCached);