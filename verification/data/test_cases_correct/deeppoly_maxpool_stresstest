def Shape as (Float l, Float u, PolyExp L, PolyExp U){[(curr[U]>=curr),(curr[l]<=curr),(curr[u]>=curr),(curr[L]<=curr)]};

func simplify_lower(Neuron n, Float coeff) = (coeff >= 0) ? (coeff * n[l]) : (coeff * n[u]);
func simplify_upper(Neuron n, Float coeff) = (coeff >= 0) ? (coeff * n[u]) : (coeff * n[l]);

func replace_lower(Neuron n, Float coeff) = (coeff >= 0) ? (coeff * n[L]) : (coeff * n[U]);
func replace_upper(Neuron n, Float coeff) = (coeff >= 0) ? (coeff * n[U]) : (coeff * n[L]);

func priority(Neuron n) = n[layer];
func priority2(Neuron n) = -n[layer];

func backsubs_lower(PolyExp e, Neuron n) = (e.traverse(backward, priority2, true, replace_lower){e <= n}).map(simplify_lower);
func backsubs_upper(PolyExp e, Neuron n) = (e.traverse(backward, priority2, true, replace_upper){e >= n}).map(simplify_upper);

func f1(Neuron n1, Neuron n2) = n1[u] >= n2[u];
func f2(Float ui, Neuron n1, Neuron n2) = (n1[u] >= ui) ? false: (n2[u] >= ui ? true : (n1[u] >= n2[u]));

transformer deeppoly{
    Maxpool -> len(argmax(prev, f1)) == 1 ? 
                ((len(argmax(prev, f2(max(prev[u])))) == 1) ? 
                    ((len(argmax(prev, f2(sum(argmax(prev, f2(max(prev[u])))[u])))) == 1) ? 
                        (max(prev[l]) >= sum(argmax(prev, f2(max(prev[u])))[u])) ? 
                            (max(prev[l]), max(prev[u]), max(prev[l]), max(prev[u])):
                            ((max(prev[l]) >= sum(argmax(prev, f2(sum(argmax(prev, f2(max(prev[u])))[u])))[u])) ?
                                (max(prev[l]), max(prev[u]), max(prev[l]), max(prev[u])):
                                (max(prev[l]), max(prev[u]), max(prev[l]), ((sum(argmax(prev, f1)[u]) - sum(argmax(prev, f2(sum(argmax(prev, f2(max(prev[u])))[u])))[u])) / (sum(argmax(prev, f1)[u]) - sum(argmax(prev, f1)[l]))) * (sum(argmax(prev, f1)) - sum(argmax(prev, f1)[l])) + (((sum(argmax(prev, f2(max(prev[u])))[u]) - sum(argmax(prev, f2(sum(argmax(prev, f2(max(prev[u])))[u])))[u])) / (sum(argmax(prev, f2(max(prev[u])))[u]) - sum(argmax(prev, f2(max(prev[u])))[l]))) * (sum(argmax(prev, f2(max(prev[u])))) - sum(argmax(prev, f2(max(prev[u])))[l]))) + (sum(argmax(prev, f2(sum(argmax(prev, f2(max(prev[u])))[u])))[u])))):
                        (max(prev[l]), max(prev[u]), max(prev[l]), max(prev[u]))):
                    (max(prev[l]), max(prev[u]), max(prev[l]), max(prev[u]))):
                (max(prev[l]), max(prev[u]), max(prev[l]), max(prev[u]));
}

flow(forward, priority, true, deeppoly);


