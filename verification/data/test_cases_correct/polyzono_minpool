def Shape as (Float l, Float u, PolyExp L, PolyExp U, ZonoExp z){[curr[l]<=curr,curr[u]>=curr,curr[L]<=curr,curr[U]>=curr,curr In curr[z]]};

func priority(Neuron n) = n[layer];

func f(Neuron n1, Neuron n2) = n1[u] < n2[l];

transformer deeppoly{
    Minpool -> len(argmax(prev, f)) > 0 ? 
                    (min(prev[l]), min(prev[u]), avg(argmax(prev, f)), avg(argmax(prev, f)), avg(argmax(prev, f)[z])) : 
                    (min(prev[l]), min(prev[u]), min(prev[l]), min(prev[u]), ((min(prev[u]) + min(prev[l])) / 2) + (((min(prev[u]) - min(prev[l])) / 2) * eps));
}

flow(forward, priority, true, deeppoly);