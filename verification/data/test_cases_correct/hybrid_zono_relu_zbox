def Shape as (Float l, Float u, Float b, ZonoExp z){[curr[b] >= 0, curr[l] <= curr, curr[u] >= curr, curr In (curr[z] + (curr[b]*eps))]};

func simplify_lower(Noise n, Float coeff) = (coeff >= 0) ? (coeff * (-1)) : (coeff * 1);
func simplify_upper(Noise n, Float coeff) = (coeff >= 0) ? (coeff * 1) : (coeff * (-1));

func compute_min(Neuron n) = n[z].map(simplify_lower) - n[b];
func compute_max(Neuron n) = n[b] + n[z].map(simplify_upper);

func priority(Neuron n) = n[layer];
func relu(Float r) = r >= 0 ? r : 0;


transformer zono_box{
    Relu -> ((prev[l]) >= 0) ? 
                (prev[l], prev[u], (prev[b]), (prev[z])) : 
                (-prev[b], prev[b] + relu(prev[u]), prev[b], ((1 + eps) * (relu(prev[u]/2))));
}

flow(forward, priority, true, zono_box);