# Generated from dsl.g4 by ANTLR 4.12.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,69,496,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,
        65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,
        71,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
        2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,
        5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,
        7,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,
        1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,
        1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,14,1,14,
        1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,20,
        1,20,1,21,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,24,1,25,1,25,
        1,25,1,26,1,26,1,27,1,27,1,27,1,28,1,28,1,28,1,29,1,29,1,30,1,30,
        1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,36,1,36,1,37,
        1,37,1,38,1,38,1,39,1,39,1,39,1,40,1,40,1,40,1,40,1,40,1,40,1,40,
        1,40,1,40,1,41,1,41,1,41,1,41,1,42,1,42,1,42,1,42,1,43,1,43,1,43,
        1,43,1,44,1,44,1,44,1,44,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,46,
        1,46,1,46,1,46,1,46,1,46,1,46,1,47,1,47,1,47,1,47,1,48,1,48,1,48,
        1,48,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,50,1,50,1,50,1,50,1,50,
        1,51,1,51,1,51,1,51,1,51,1,51,1,52,1,52,1,52,1,52,1,52,1,52,1,52,
        1,53,1,53,1,53,1,53,1,53,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,
        1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,56,1,56,1,56,1,56,1,56,
        1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,
        1,58,1,58,1,58,1,58,1,58,1,59,1,59,1,59,1,59,1,60,1,60,1,60,1,60,
        1,60,1,61,1,61,1,61,1,61,1,61,1,61,1,62,1,62,1,62,1,62,1,62,1,63,
        1,63,1,63,1,63,1,63,1,64,3,64,435,8,64,1,64,4,64,438,8,64,11,64,
        12,64,439,1,65,4,65,443,8,65,11,65,12,65,444,1,65,1,65,4,65,449,
        8,65,11,65,12,65,450,1,65,1,65,3,65,455,8,65,1,65,4,65,458,8,65,
        11,65,12,65,459,3,65,462,8,65,1,66,1,66,1,67,1,67,1,68,1,68,1,68,
        1,68,5,68,472,8,68,10,68,12,68,475,9,68,1,69,1,69,1,70,4,70,480,
        8,70,11,70,12,70,481,1,70,1,70,1,71,1,71,1,71,1,71,5,71,490,8,71,
        10,71,12,71,493,9,71,1,71,1,71,0,0,72,1,1,3,2,5,3,7,4,9,5,11,6,13,
        7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,
        37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,
        59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,
        81,41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,49,99,50,101,
        51,103,52,105,53,107,54,109,55,111,56,113,57,115,58,117,59,119,60,
        121,61,123,62,125,63,127,64,129,65,131,66,133,0,135,0,137,67,139,
        0,141,68,143,69,1,0,6,1,0,48,57,2,0,69,69,101,101,2,0,43,43,45,45,
        3,0,65,90,95,95,97,122,3,0,9,10,13,13,32,32,2,0,10,10,13,13,504,
        0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,
        1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,
        1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,
        1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,
        1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,
        1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,
        1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,
        1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,
        1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,
        1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,
        1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,
        0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,0,117,1,0,0,0,0,119,1,
        0,0,0,0,121,1,0,0,0,0,123,1,0,0,0,0,125,1,0,0,0,0,127,1,0,0,0,0,
        129,1,0,0,0,0,131,1,0,0,0,0,137,1,0,0,0,0,141,1,0,0,0,0,143,1,0,
        0,0,1,145,1,0,0,0,3,150,1,0,0,0,5,153,1,0,0,0,7,165,1,0,0,0,9,168,
        1,0,0,0,11,172,1,0,0,0,13,181,1,0,0,0,15,189,1,0,0,0,17,193,1,0,
        0,0,19,199,1,0,0,0,21,204,1,0,0,0,23,212,1,0,0,0,25,220,1,0,0,0,
        27,227,1,0,0,0,29,232,1,0,0,0,31,234,1,0,0,0,33,236,1,0,0,0,35,238,
        1,0,0,0,37,240,1,0,0,0,39,242,1,0,0,0,41,244,1,0,0,0,43,248,1,0,
        0,0,45,251,1,0,0,0,47,253,1,0,0,0,49,255,1,0,0,0,51,258,1,0,0,0,
        53,261,1,0,0,0,55,263,1,0,0,0,57,266,1,0,0,0,59,269,1,0,0,0,61,271,
        1,0,0,0,63,273,1,0,0,0,65,275,1,0,0,0,67,277,1,0,0,0,69,279,1,0,
        0,0,71,281,1,0,0,0,73,283,1,0,0,0,75,285,1,0,0,0,77,287,1,0,0,0,
        79,289,1,0,0,0,81,292,1,0,0,0,83,301,1,0,0,0,85,305,1,0,0,0,87,309,
        1,0,0,0,89,313,1,0,0,0,91,317,1,0,0,0,93,324,1,0,0,0,95,331,1,0,
        0,0,97,335,1,0,0,0,99,339,1,0,0,0,101,346,1,0,0,0,103,351,1,0,0,
        0,105,357,1,0,0,0,107,364,1,0,0,0,109,369,1,0,0,0,111,377,1,0,0,
        0,113,385,1,0,0,0,115,390,1,0,0,0,117,403,1,0,0,0,119,408,1,0,0,
        0,121,412,1,0,0,0,123,417,1,0,0,0,125,423,1,0,0,0,127,428,1,0,0,
        0,129,434,1,0,0,0,131,442,1,0,0,0,133,463,1,0,0,0,135,465,1,0,0,
        0,137,467,1,0,0,0,139,476,1,0,0,0,141,479,1,0,0,0,143,485,1,0,0,
        0,145,146,5,102,0,0,146,147,5,108,0,0,147,148,5,111,0,0,148,149,
        5,119,0,0,149,2,1,0,0,0,150,151,5,45,0,0,151,152,5,62,0,0,152,4,
        1,0,0,0,153,154,5,116,0,0,154,155,5,114,0,0,155,156,5,97,0,0,156,
        157,5,110,0,0,157,158,5,115,0,0,158,159,5,102,0,0,159,160,5,111,
        0,0,160,161,5,114,0,0,161,162,5,109,0,0,162,163,5,101,0,0,163,164,
        5,114,0,0,164,6,1,0,0,0,165,166,5,105,0,0,166,167,5,110,0,0,167,
        8,1,0,0,0,168,169,5,111,0,0,169,170,5,117,0,0,170,171,5,116,0,0,
        171,10,1,0,0,0,172,173,5,98,0,0,173,174,5,97,0,0,174,175,5,99,0,
        0,175,176,5,107,0,0,176,177,5,119,0,0,177,178,5,97,0,0,178,179,5,
        114,0,0,179,180,5,100,0,0,180,12,1,0,0,0,181,182,5,102,0,0,182,183,
        5,111,0,0,183,184,5,114,0,0,184,185,5,119,0,0,185,186,5,97,0,0,186,
        187,5,114,0,0,187,188,5,100,0,0,188,14,1,0,0,0,189,190,5,73,0,0,
        190,191,5,110,0,0,191,192,5,116,0,0,192,16,1,0,0,0,193,194,5,70,
        0,0,194,195,5,108,0,0,195,196,5,111,0,0,196,197,5,97,0,0,197,198,
        5,116,0,0,198,18,1,0,0,0,199,200,5,66,0,0,200,201,5,111,0,0,201,
        202,5,111,0,0,202,203,5,108,0,0,203,20,1,0,0,0,204,205,5,80,0,0,
        205,206,5,111,0,0,206,207,5,108,0,0,207,208,5,121,0,0,208,209,5,
        69,0,0,209,210,5,120,0,0,210,211,5,112,0,0,211,22,1,0,0,0,212,213,
        5,90,0,0,213,214,5,111,0,0,214,215,5,110,0,0,215,216,5,111,0,0,216,
        217,5,69,0,0,217,218,5,120,0,0,218,219,5,112,0,0,219,24,1,0,0,0,
        220,221,5,78,0,0,221,222,5,101,0,0,222,223,5,117,0,0,223,224,5,114,
        0,0,224,225,5,111,0,0,225,226,5,110,0,0,226,26,1,0,0,0,227,228,5,
        76,0,0,228,229,5,105,0,0,229,230,5,115,0,0,230,231,5,116,0,0,231,
        28,1,0,0,0,232,233,5,46,0,0,233,30,1,0,0,0,234,235,5,44,0,0,235,
        32,1,0,0,0,236,237,5,43,0,0,237,34,1,0,0,0,238,239,5,45,0,0,239,
        36,1,0,0,0,240,241,5,42,0,0,241,38,1,0,0,0,242,243,5,47,0,0,243,
        40,1,0,0,0,244,245,5,97,0,0,245,246,5,110,0,0,246,247,5,100,0,0,
        247,42,1,0,0,0,248,249,5,111,0,0,249,250,5,114,0,0,250,44,1,0,0,
        0,251,252,5,60,0,0,252,46,1,0,0,0,253,254,5,61,0,0,254,48,1,0,0,
        0,255,256,5,61,0,0,256,257,5,61,0,0,257,50,1,0,0,0,258,259,5,33,
        0,0,259,260,5,61,0,0,260,52,1,0,0,0,261,262,5,62,0,0,262,54,1,0,
        0,0,263,264,5,60,0,0,264,265,5,61,0,0,265,56,1,0,0,0,266,267,5,62,
        0,0,267,268,5,61,0,0,268,58,1,0,0,0,269,270,5,33,0,0,270,60,1,0,
        0,0,271,272,5,40,0,0,272,62,1,0,0,0,273,274,5,41,0,0,274,64,1,0,
        0,0,275,276,5,91,0,0,276,66,1,0,0,0,277,278,5,93,0,0,278,68,1,0,
        0,0,279,280,5,123,0,0,280,70,1,0,0,0,281,282,5,125,0,0,282,72,1,
        0,0,0,283,284,5,59,0,0,284,74,1,0,0,0,285,286,5,63,0,0,286,76,1,
        0,0,0,287,288,5,58,0,0,288,78,1,0,0,0,289,290,5,105,0,0,290,291,
        5,102,0,0,291,80,1,0,0,0,292,293,5,116,0,0,293,294,5,114,0,0,294,
        295,5,97,0,0,295,296,5,118,0,0,296,297,5,101,0,0,297,298,5,114,0,
        0,298,299,5,115,0,0,299,300,5,101,0,0,300,82,1,0,0,0,301,302,5,115,
        0,0,302,303,5,117,0,0,303,304,5,109,0,0,304,84,1,0,0,0,305,306,5,
        115,0,0,306,307,5,117,0,0,307,308,5,98,0,0,308,86,1,0,0,0,309,310,
        5,109,0,0,310,311,5,97,0,0,311,312,5,112,0,0,312,88,1,0,0,0,313,
        314,5,100,0,0,314,315,5,111,0,0,315,316,5,116,0,0,316,90,1,0,0,0,
        317,318,5,97,0,0,318,319,5,114,0,0,319,320,5,103,0,0,320,321,5,109,
        0,0,321,322,5,105,0,0,322,323,5,110,0,0,323,92,1,0,0,0,324,325,5,
        97,0,0,325,326,5,114,0,0,326,327,5,103,0,0,327,328,5,109,0,0,328,
        329,5,97,0,0,329,330,5,120,0,0,330,94,1,0,0,0,331,332,5,109,0,0,
        332,333,5,105,0,0,333,334,5,110,0,0,334,96,1,0,0,0,335,336,5,109,
        0,0,336,337,5,97,0,0,337,338,5,120,0,0,338,98,1,0,0,0,339,340,5,
        119,0,0,340,341,5,101,0,0,341,342,5,105,0,0,342,343,5,103,0,0,343,
        344,5,104,0,0,344,345,5,116,0,0,345,100,1,0,0,0,346,347,5,98,0,0,
        347,348,5,105,0,0,348,349,5,97,0,0,349,350,5,115,0,0,350,102,1,0,
        0,0,351,352,5,108,0,0,352,353,5,97,0,0,353,354,5,121,0,0,354,355,
        5,101,0,0,355,356,5,114,0,0,356,104,1,0,0,0,357,358,5,65,0,0,358,
        359,5,102,0,0,359,360,5,102,0,0,360,361,5,105,0,0,361,362,5,110,
        0,0,362,363,5,101,0,0,363,106,1,0,0,0,364,365,5,82,0,0,365,366,5,
        101,0,0,366,367,5,108,0,0,367,368,5,117,0,0,368,108,1,0,0,0,369,
        370,5,77,0,0,370,371,5,97,0,0,371,372,5,120,0,0,372,373,5,112,0,
        0,373,374,5,111,0,0,374,375,5,111,0,0,375,376,5,108,0,0,376,110,
        1,0,0,0,377,378,5,83,0,0,378,379,5,105,0,0,379,380,5,103,0,0,380,
        381,5,109,0,0,381,382,5,111,0,0,382,383,5,105,0,0,383,384,5,100,
        0,0,384,112,1,0,0,0,385,386,5,84,0,0,386,387,5,97,0,0,387,388,5,
        110,0,0,388,389,5,104,0,0,389,114,1,0,0,0,390,391,5,100,0,0,391,
        392,5,101,0,0,392,393,5,102,0,0,393,394,5,32,0,0,394,395,5,83,0,
        0,395,396,5,104,0,0,396,397,5,97,0,0,397,398,5,112,0,0,398,399,5,
        101,0,0,399,400,5,32,0,0,400,401,5,97,0,0,401,402,5,115,0,0,402,
        116,1,0,0,0,403,404,5,102,0,0,404,405,5,117,0,0,405,406,5,110,0,
        0,406,407,5,99,0,0,407,118,1,0,0,0,408,409,5,101,0,0,409,410,5,112,
        0,0,410,411,5,115,0,0,411,120,1,0,0,0,412,413,5,116,0,0,413,414,
        5,114,0,0,414,415,5,117,0,0,415,416,5,101,0,0,416,122,1,0,0,0,417,
        418,5,102,0,0,418,419,5,97,0,0,419,420,5,108,0,0,420,421,5,115,0,
        0,421,422,5,101,0,0,422,124,1,0,0,0,423,424,5,99,0,0,424,425,5,117,
        0,0,425,426,5,114,0,0,426,427,5,114,0,0,427,126,1,0,0,0,428,429,
        5,112,0,0,429,430,5,114,0,0,430,431,5,101,0,0,431,432,5,118,0,0,
        432,128,1,0,0,0,433,435,3,135,67,0,434,433,1,0,0,0,434,435,1,0,0,
        0,435,437,1,0,0,0,436,438,3,133,66,0,437,436,1,0,0,0,438,439,1,0,
        0,0,439,437,1,0,0,0,439,440,1,0,0,0,440,130,1,0,0,0,441,443,7,0,
        0,0,442,441,1,0,0,0,443,444,1,0,0,0,444,442,1,0,0,0,444,445,1,0,
        0,0,445,446,1,0,0,0,446,448,5,46,0,0,447,449,7,0,0,0,448,447,1,0,
        0,0,449,450,1,0,0,0,450,448,1,0,0,0,450,451,1,0,0,0,451,461,1,0,
        0,0,452,454,7,1,0,0,453,455,7,2,0,0,454,453,1,0,0,0,454,455,1,0,
        0,0,455,457,1,0,0,0,456,458,7,0,0,0,457,456,1,0,0,0,458,459,1,0,
        0,0,459,457,1,0,0,0,459,460,1,0,0,0,460,462,1,0,0,0,461,452,1,0,
        0,0,461,462,1,0,0,0,462,132,1,0,0,0,463,464,7,0,0,0,464,134,1,0,
        0,0,465,466,7,2,0,0,466,136,1,0,0,0,467,473,3,139,69,0,468,472,3,
        139,69,0,469,472,3,133,66,0,470,472,5,39,0,0,471,468,1,0,0,0,471,
        469,1,0,0,0,471,470,1,0,0,0,472,475,1,0,0,0,473,471,1,0,0,0,473,
        474,1,0,0,0,474,138,1,0,0,0,475,473,1,0,0,0,476,477,7,3,0,0,477,
        140,1,0,0,0,478,480,7,4,0,0,479,478,1,0,0,0,480,481,1,0,0,0,481,
        479,1,0,0,0,481,482,1,0,0,0,482,483,1,0,0,0,483,484,6,70,0,0,484,
        142,1,0,0,0,485,486,5,47,0,0,486,487,5,47,0,0,487,491,1,0,0,0,488,
        490,8,5,0,0,489,488,1,0,0,0,490,493,1,0,0,0,491,489,1,0,0,0,491,
        492,1,0,0,0,492,494,1,0,0,0,493,491,1,0,0,0,494,495,6,71,1,0,495,
        144,1,0,0,0,12,0,434,439,444,450,454,459,461,471,473,481,491,2,6,
        0,0,0,1,0
    ]

class dslLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    FLOW = 1
    ARROW = 2
    TRANSFORMER = 3
    IN = 4
    OUT = 5
    BACKWARD = 6
    FORWARD = 7
    INTT = 8
    FLOATT = 9
    BOOL = 10
    POLYEXP = 11
    ZONOEXP = 12
    NEURON = 13
    LIST = 14
    DOT = 15
    COMMA = 16
    PLUS = 17
    MINUS = 18
    MULT = 19
    DIV = 20
    AND = 21
    OR = 22
    LT = 23
    EQ = 24
    EQQ = 25
    NEQ = 26
    GT = 27
    LEQ = 28
    GEQ = 29
    NOT = 30
    LPAREN = 31
    RPAREN = 32
    LSQR = 33
    RSQR = 34
    LBRACE = 35
    RBRACE = 36
    SEMI = 37
    QUES = 38
    COLON = 39
    IF = 40
    TRAV = 41
    SUM = 42
    SUB = 43
    MAP = 44
    DOTT = 45
    ARGMIN = 46
    ARGMAX = 47
    MIN = 48
    MAX = 49
    WEIGHT = 50
    BIAS = 51
    LAYER = 52
    AFFINE = 53
    RELU = 54
    MAXPOOL = 55
    SIGMOID = 56
    TANH = 57
    SHAPE = 58
    FUNC = 59
    EPSILON = 60
    TRUE = 61
    FALSE = 62
    CURR = 63
    PREV = 64
    IntConst = 65
    FloatConst = 66
    VAR = 67
    WS = 68
    LineComment = 69

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'flow'", "'->'", "'transformer'", "'in'", "'out'", "'backward'", 
            "'forward'", "'Int'", "'Float'", "'Bool'", "'PolyExp'", "'ZonoExp'", 
            "'Neuron'", "'List'", "'.'", "','", "'+'", "'-'", "'*'", "'/'", 
            "'and'", "'or'", "'<'", "'='", "'=='", "'!='", "'>'", "'<='", 
            "'>='", "'!'", "'('", "')'", "'['", "']'", "'{'", "'}'", "';'", 
            "'?'", "':'", "'if'", "'traverse'", "'sum'", "'sub'", "'map'", 
            "'dot'", "'argmin'", "'argmax'", "'min'", "'max'", "'weight'", 
            "'bias'", "'layer'", "'Affine'", "'Relu'", "'Maxpool'", "'Sigmoid'", 
            "'Tanh'", "'def Shape as'", "'func'", "'eps'", "'true'", "'false'", 
            "'curr'", "'prev'" ]

    symbolicNames = [ "<INVALID>",
            "FLOW", "ARROW", "TRANSFORMER", "IN", "OUT", "BACKWARD", "FORWARD", 
            "INTT", "FLOATT", "BOOL", "POLYEXP", "ZONOEXP", "NEURON", "LIST", 
            "DOT", "COMMA", "PLUS", "MINUS", "MULT", "DIV", "AND", "OR", 
            "LT", "EQ", "EQQ", "NEQ", "GT", "LEQ", "GEQ", "NOT", "LPAREN", 
            "RPAREN", "LSQR", "RSQR", "LBRACE", "RBRACE", "SEMI", "QUES", 
            "COLON", "IF", "TRAV", "SUM", "SUB", "MAP", "DOTT", "ARGMIN", 
            "ARGMAX", "MIN", "MAX", "WEIGHT", "BIAS", "LAYER", "AFFINE", 
            "RELU", "MAXPOOL", "SIGMOID", "TANH", "SHAPE", "FUNC", "EPSILON", 
            "TRUE", "FALSE", "CURR", "PREV", "IntConst", "FloatConst", "VAR", 
            "WS", "LineComment" ]

    ruleNames = [ "FLOW", "ARROW", "TRANSFORMER", "IN", "OUT", "BACKWARD", 
                  "FORWARD", "INTT", "FLOATT", "BOOL", "POLYEXP", "ZONOEXP", 
                  "NEURON", "LIST", "DOT", "COMMA", "PLUS", "MINUS", "MULT", 
                  "DIV", "AND", "OR", "LT", "EQ", "EQQ", "NEQ", "GT", "LEQ", 
                  "GEQ", "NOT", "LPAREN", "RPAREN", "LSQR", "RSQR", "LBRACE", 
                  "RBRACE", "SEMI", "QUES", "COLON", "IF", "TRAV", "SUM", 
                  "SUB", "MAP", "DOTT", "ARGMIN", "ARGMAX", "MIN", "MAX", 
                  "WEIGHT", "BIAS", "LAYER", "AFFINE", "RELU", "MAXPOOL", 
                  "SIGMOID", "TANH", "SHAPE", "FUNC", "EPSILON", "TRUE", 
                  "FALSE", "CURR", "PREV", "IntConst", "FloatConst", "Digit", 
                  "Sign", "VAR", "Nondigit", "WS", "LineComment" ]

    grammarFileName = "dsl.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.12.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


