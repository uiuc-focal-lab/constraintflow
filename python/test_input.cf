def Shape as (Float l, Float u){(curr[l]<=curr) and (curr[u]>=curr)};

func replace_lower(Neuron n, Float c) = c>=0 ? c*n[l] : c*n[u];
func replace_upper(Neuron n, Float c) = c>=0 ? c*n[u] : c*n[l];

func priority1(Neuron n) = -n[layer];
func priority2(Neuron n) = n[layer];

transformer deeppoly(curr, prev){
    Relu -> sum(prev[l])>=0 ? (sum(prev[l]), sum(prev[u])) : (sum(prev[u])<=0 ? (0,0) : (0, sum(prev[u])));
}

flow(forward, priority2, true, deeppoly);