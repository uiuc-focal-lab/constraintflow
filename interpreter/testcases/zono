def Shape as (Float l, Float u, ZonoExp Z){[(curr[l]<=curr),(curr[u]>=curr),(curr In curr[Z])]};

func deepz_lower(Noise n, Float c) = (c >= 0) ? -1 : 1;
func deepz_upper(Noise n, Float c) = (c >= 0) ? 1 : 1;

func priority(Neuron n) = n[layer];


transformer zono{
    Relu -> ((prev[l]) >= 0) ? ((prev[l]), (prev[u]), (prev[Z])) : (((prev[u]) <= 0) ? (0.0, 0.0, 0.0) : (0.0, (prev[u]), ((prev[u]) / 2.0) + (((prev[u]) / 2.0) * eps)));
    Affine -> (prev[Z].dot(curr[weight]) + (curr[bias]).map(deepz_lower), prev[Z].dot(curr[weight]) + (curr[bias]).map(deepz_upper), prev[Z].dot(curr[weight]) + (curr[bias]));
}

flow(forward, priority, true, zono);