def Shape as (Float l, Float u){(curr[l]<=curr) and (curr[u]>=curr)};

func simplify_lower(Neuron n, Float coeff) = (coeff >= 0) ? (coeff * n[l]) : (coeff * n[u]);
func simplify_upper(Neuron n, Float coeff) = (coeff >= 0) ? (coeff * n[u]) : (coeff * n[l]);

func priority(Neuron n) = n[layer];


transformer ibp(curr, prev){
    Maxpool -> (min(prev[l]), min(prev[u]));
    Relu -> (sum(prev[l]) <= 0) ? (sum(prev[l]), sum(prev[u])) : ((sum(prev[u]) <= 0) ? (0, 0) : (0, sum(prev[u])));
    Affine -> ((prev.dot(curr[weight]) + curr[bias]).map(simplify_upper), (prev.dot(curr[weight]) + curr[bias]).map(simplify_lower));
}

flow(forward, priority, true, ibp);