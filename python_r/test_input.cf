def Shape as (Float l, Float u, ZonoExp z){(curr[l]<=curr) and (curr[u]>=curr) and (curr In curr[z])};

func simplify_lower(Neuron n, Float coeff) = (coeff >= 0) ? (coeff * n[l]) : (coeff * n[u]);
func simplify_upper(Neuron n, Float coeff) = (coeff >= 0) ? (coeff * n[u]) : (coeff * n[l]);

func priority1(Neuron n) = -n[layer];
func priority2(Neuron n) = n[layer];


transformer deeppoly(curr, prev){
    Affine -> ((prev.dot(curr[weight]) + curr[bias]).map(simplify_lower), (prev.dot(curr[weight]) + curr[bias]).map(simplify_upper), prev[z].dot(curr[weight]) + curr[bias]);
}

flow(forward, priority2, true, deeppoly);