# Generated from dsl.g4 by ANTLR 4.12.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,71,508,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,
        65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,
        71,2,72,7,72,2,73,7,73,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,2,1,2,1,
        2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,4,1,4,1,4,1,
        4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,
        6,1,6,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,
        9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,
        11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,
        13,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,
        19,1,19,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,22,1,22,1,23,1,23,1,
        24,1,24,1,24,1,25,1,25,1,25,1,26,1,26,1,27,1,27,1,27,1,28,1,28,1,
        28,1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,
        35,1,35,1,36,1,36,1,37,1,37,1,38,1,38,1,39,1,39,1,39,1,40,1,40,1,
        40,1,40,1,40,1,40,1,40,1,40,1,40,1,41,1,41,1,41,1,41,1,42,1,42,1,
        42,1,42,1,43,1,43,1,43,1,43,1,44,1,44,1,44,1,44,1,45,1,45,1,45,1,
        45,1,46,1,46,1,46,1,46,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,48,1,
        48,1,48,1,48,1,48,1,48,1,48,1,49,1,49,1,49,1,49,1,50,1,50,1,50,1,
        50,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,52,1,52,1,52,1,52,1,52,1,
        53,1,53,1,53,1,53,1,53,1,53,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,
        55,1,55,1,55,1,55,1,55,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,
        57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,58,1,58,1,58,1,58,1,58,1,
        59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,
        60,1,60,1,60,1,60,1,60,1,61,1,61,1,61,1,61,1,62,1,62,1,62,1,62,1,
        62,1,63,1,63,1,63,1,63,1,63,1,63,1,64,1,64,1,64,1,64,1,64,1,65,1,
        65,1,65,1,65,1,65,1,66,3,66,447,8,66,1,66,4,66,450,8,66,11,66,12,
        66,451,1,67,4,67,455,8,67,11,67,12,67,456,1,67,1,67,4,67,461,8,67,
        11,67,12,67,462,1,67,1,67,3,67,467,8,67,1,67,4,67,470,8,67,11,67,
        12,67,471,3,67,474,8,67,1,68,1,68,1,69,1,69,1,70,1,70,1,70,1,70,
        5,70,484,8,70,10,70,12,70,487,9,70,1,71,1,71,1,72,4,72,492,8,72,
        11,72,12,72,493,1,72,1,72,1,73,1,73,1,73,1,73,5,73,502,8,73,10,73,
        12,73,505,9,73,1,73,1,73,0,0,74,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,
        8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,
        19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,
        30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,
        41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,49,99,50,101,51,
        103,52,105,53,107,54,109,55,111,56,113,57,115,58,117,59,119,60,121,
        61,123,62,125,63,127,64,129,65,131,66,133,67,135,68,137,0,139,0,
        141,69,143,0,145,70,147,71,1,0,6,1,0,48,57,2,0,69,69,101,101,2,0,
        43,43,45,45,3,0,65,90,95,95,97,122,3,0,9,10,13,13,32,32,2,0,10,10,
        13,13,516,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,
        0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,
        0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,
        0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,
        0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,
        0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,
        0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,
        0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,
        0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,
        0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,
        0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,
        109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,0,117,1,0,
        0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,123,1,0,0,0,0,125,1,0,0,0,0,127,
        1,0,0,0,0,129,1,0,0,0,0,131,1,0,0,0,0,133,1,0,0,0,0,135,1,0,0,0,
        0,141,1,0,0,0,0,145,1,0,0,0,0,147,1,0,0,0,1,149,1,0,0,0,3,154,1,
        0,0,0,5,157,1,0,0,0,7,169,1,0,0,0,9,172,1,0,0,0,11,176,1,0,0,0,13,
        185,1,0,0,0,15,193,1,0,0,0,17,197,1,0,0,0,19,203,1,0,0,0,21,208,
        1,0,0,0,23,216,1,0,0,0,25,224,1,0,0,0,27,231,1,0,0,0,29,236,1,0,
        0,0,31,238,1,0,0,0,33,240,1,0,0,0,35,242,1,0,0,0,37,244,1,0,0,0,
        39,246,1,0,0,0,41,248,1,0,0,0,43,252,1,0,0,0,45,255,1,0,0,0,47,257,
        1,0,0,0,49,259,1,0,0,0,51,262,1,0,0,0,53,265,1,0,0,0,55,267,1,0,
        0,0,57,270,1,0,0,0,59,273,1,0,0,0,61,275,1,0,0,0,63,277,1,0,0,0,
        65,279,1,0,0,0,67,281,1,0,0,0,69,283,1,0,0,0,71,285,1,0,0,0,73,287,
        1,0,0,0,75,289,1,0,0,0,77,291,1,0,0,0,79,293,1,0,0,0,81,296,1,0,
        0,0,83,305,1,0,0,0,85,309,1,0,0,0,87,313,1,0,0,0,89,317,1,0,0,0,
        91,321,1,0,0,0,93,325,1,0,0,0,95,329,1,0,0,0,97,336,1,0,0,0,99,343,
        1,0,0,0,101,347,1,0,0,0,103,351,1,0,0,0,105,358,1,0,0,0,107,363,
        1,0,0,0,109,369,1,0,0,0,111,376,1,0,0,0,113,381,1,0,0,0,115,389,
        1,0,0,0,117,397,1,0,0,0,119,402,1,0,0,0,121,415,1,0,0,0,123,420,
        1,0,0,0,125,424,1,0,0,0,127,429,1,0,0,0,129,435,1,0,0,0,131,440,
        1,0,0,0,133,446,1,0,0,0,135,454,1,0,0,0,137,475,1,0,0,0,139,477,
        1,0,0,0,141,479,1,0,0,0,143,488,1,0,0,0,145,491,1,0,0,0,147,497,
        1,0,0,0,149,150,5,102,0,0,150,151,5,108,0,0,151,152,5,111,0,0,152,
        153,5,119,0,0,153,2,1,0,0,0,154,155,5,45,0,0,155,156,5,62,0,0,156,
        4,1,0,0,0,157,158,5,116,0,0,158,159,5,114,0,0,159,160,5,97,0,0,160,
        161,5,110,0,0,161,162,5,115,0,0,162,163,5,102,0,0,163,164,5,111,
        0,0,164,165,5,114,0,0,165,166,5,109,0,0,166,167,5,101,0,0,167,168,
        5,114,0,0,168,6,1,0,0,0,169,170,5,105,0,0,170,171,5,110,0,0,171,
        8,1,0,0,0,172,173,5,111,0,0,173,174,5,117,0,0,174,175,5,116,0,0,
        175,10,1,0,0,0,176,177,5,98,0,0,177,178,5,97,0,0,178,179,5,99,0,
        0,179,180,5,107,0,0,180,181,5,119,0,0,181,182,5,97,0,0,182,183,5,
        114,0,0,183,184,5,100,0,0,184,12,1,0,0,0,185,186,5,102,0,0,186,187,
        5,111,0,0,187,188,5,114,0,0,188,189,5,119,0,0,189,190,5,97,0,0,190,
        191,5,114,0,0,191,192,5,100,0,0,192,14,1,0,0,0,193,194,5,73,0,0,
        194,195,5,110,0,0,195,196,5,116,0,0,196,16,1,0,0,0,197,198,5,70,
        0,0,198,199,5,108,0,0,199,200,5,111,0,0,200,201,5,97,0,0,201,202,
        5,116,0,0,202,18,1,0,0,0,203,204,5,66,0,0,204,205,5,111,0,0,205,
        206,5,111,0,0,206,207,5,108,0,0,207,20,1,0,0,0,208,209,5,80,0,0,
        209,210,5,111,0,0,210,211,5,108,0,0,211,212,5,121,0,0,212,213,5,
        69,0,0,213,214,5,120,0,0,214,215,5,112,0,0,215,22,1,0,0,0,216,217,
        5,90,0,0,217,218,5,111,0,0,218,219,5,110,0,0,219,220,5,111,0,0,220,
        221,5,69,0,0,221,222,5,120,0,0,222,223,5,112,0,0,223,24,1,0,0,0,
        224,225,5,78,0,0,225,226,5,101,0,0,226,227,5,117,0,0,227,228,5,114,
        0,0,228,229,5,111,0,0,229,230,5,110,0,0,230,26,1,0,0,0,231,232,5,
        76,0,0,232,233,5,105,0,0,233,234,5,115,0,0,234,235,5,116,0,0,235,
        28,1,0,0,0,236,237,5,46,0,0,237,30,1,0,0,0,238,239,5,44,0,0,239,
        32,1,0,0,0,240,241,5,43,0,0,241,34,1,0,0,0,242,243,5,45,0,0,243,
        36,1,0,0,0,244,245,5,42,0,0,245,38,1,0,0,0,246,247,5,47,0,0,247,
        40,1,0,0,0,248,249,5,97,0,0,249,250,5,110,0,0,250,251,5,100,0,0,
        251,42,1,0,0,0,252,253,5,111,0,0,253,254,5,114,0,0,254,44,1,0,0,
        0,255,256,5,60,0,0,256,46,1,0,0,0,257,258,5,61,0,0,258,48,1,0,0,
        0,259,260,5,61,0,0,260,261,5,61,0,0,261,50,1,0,0,0,262,263,5,33,
        0,0,263,264,5,61,0,0,264,52,1,0,0,0,265,266,5,62,0,0,266,54,1,0,
        0,0,267,268,5,60,0,0,268,269,5,61,0,0,269,56,1,0,0,0,270,271,5,62,
        0,0,271,272,5,61,0,0,272,58,1,0,0,0,273,274,5,33,0,0,274,60,1,0,
        0,0,275,276,5,40,0,0,276,62,1,0,0,0,277,278,5,41,0,0,278,64,1,0,
        0,0,279,280,5,91,0,0,280,66,1,0,0,0,281,282,5,93,0,0,282,68,1,0,
        0,0,283,284,5,123,0,0,284,70,1,0,0,0,285,286,5,125,0,0,286,72,1,
        0,0,0,287,288,5,59,0,0,288,74,1,0,0,0,289,290,5,63,0,0,290,76,1,
        0,0,0,291,292,5,58,0,0,292,78,1,0,0,0,293,294,5,105,0,0,294,295,
        5,102,0,0,295,80,1,0,0,0,296,297,5,116,0,0,297,298,5,114,0,0,298,
        299,5,97,0,0,299,300,5,118,0,0,300,301,5,101,0,0,301,302,5,114,0,
        0,302,303,5,115,0,0,303,304,5,101,0,0,304,82,1,0,0,0,305,306,5,115,
        0,0,306,307,5,117,0,0,307,308,5,109,0,0,308,84,1,0,0,0,309,310,5,
        108,0,0,310,311,5,101,0,0,311,312,5,110,0,0,312,86,1,0,0,0,313,314,
        5,97,0,0,314,315,5,118,0,0,315,316,5,103,0,0,316,88,1,0,0,0,317,
        318,5,115,0,0,318,319,5,117,0,0,319,320,5,98,0,0,320,90,1,0,0,0,
        321,322,5,109,0,0,322,323,5,97,0,0,323,324,5,112,0,0,324,92,1,0,
        0,0,325,326,5,100,0,0,326,327,5,111,0,0,327,328,5,116,0,0,328,94,
        1,0,0,0,329,330,5,97,0,0,330,331,5,114,0,0,331,332,5,103,0,0,332,
        333,5,109,0,0,333,334,5,105,0,0,334,335,5,110,0,0,335,96,1,0,0,0,
        336,337,5,97,0,0,337,338,5,114,0,0,338,339,5,103,0,0,339,340,5,109,
        0,0,340,341,5,97,0,0,341,342,5,120,0,0,342,98,1,0,0,0,343,344,5,
        109,0,0,344,345,5,105,0,0,345,346,5,110,0,0,346,100,1,0,0,0,347,
        348,5,109,0,0,348,349,5,97,0,0,349,350,5,120,0,0,350,102,1,0,0,0,
        351,352,5,119,0,0,352,353,5,101,0,0,353,354,5,105,0,0,354,355,5,
        103,0,0,355,356,5,104,0,0,356,357,5,116,0,0,357,104,1,0,0,0,358,
        359,5,98,0,0,359,360,5,105,0,0,360,361,5,97,0,0,361,362,5,115,0,
        0,362,106,1,0,0,0,363,364,5,108,0,0,364,365,5,97,0,0,365,366,5,121,
        0,0,366,367,5,101,0,0,367,368,5,114,0,0,368,108,1,0,0,0,369,370,
        5,65,0,0,370,371,5,102,0,0,371,372,5,102,0,0,372,373,5,105,0,0,373,
        374,5,110,0,0,374,375,5,101,0,0,375,110,1,0,0,0,376,377,5,82,0,0,
        377,378,5,101,0,0,378,379,5,108,0,0,379,380,5,117,0,0,380,112,1,
        0,0,0,381,382,5,77,0,0,382,383,5,97,0,0,383,384,5,120,0,0,384,385,
        5,112,0,0,385,386,5,111,0,0,386,387,5,111,0,0,387,388,5,108,0,0,
        388,114,1,0,0,0,389,390,5,83,0,0,390,391,5,105,0,0,391,392,5,103,
        0,0,392,393,5,109,0,0,393,394,5,111,0,0,394,395,5,105,0,0,395,396,
        5,100,0,0,396,116,1,0,0,0,397,398,5,84,0,0,398,399,5,97,0,0,399,
        400,5,110,0,0,400,401,5,104,0,0,401,118,1,0,0,0,402,403,5,100,0,
        0,403,404,5,101,0,0,404,405,5,102,0,0,405,406,5,32,0,0,406,407,5,
        83,0,0,407,408,5,104,0,0,408,409,5,97,0,0,409,410,5,112,0,0,410,
        411,5,101,0,0,411,412,5,32,0,0,412,413,5,97,0,0,413,414,5,115,0,
        0,414,120,1,0,0,0,415,416,5,102,0,0,416,417,5,117,0,0,417,418,5,
        110,0,0,418,419,5,99,0,0,419,122,1,0,0,0,420,421,5,101,0,0,421,422,
        5,112,0,0,422,423,5,115,0,0,423,124,1,0,0,0,424,425,5,116,0,0,425,
        426,5,114,0,0,426,427,5,117,0,0,427,428,5,101,0,0,428,126,1,0,0,
        0,429,430,5,102,0,0,430,431,5,97,0,0,431,432,5,108,0,0,432,433,5,
        115,0,0,433,434,5,101,0,0,434,128,1,0,0,0,435,436,5,99,0,0,436,437,
        5,117,0,0,437,438,5,114,0,0,438,439,5,114,0,0,439,130,1,0,0,0,440,
        441,5,112,0,0,441,442,5,114,0,0,442,443,5,101,0,0,443,444,5,118,
        0,0,444,132,1,0,0,0,445,447,3,139,69,0,446,445,1,0,0,0,446,447,1,
        0,0,0,447,449,1,0,0,0,448,450,3,137,68,0,449,448,1,0,0,0,450,451,
        1,0,0,0,451,449,1,0,0,0,451,452,1,0,0,0,452,134,1,0,0,0,453,455,
        7,0,0,0,454,453,1,0,0,0,455,456,1,0,0,0,456,454,1,0,0,0,456,457,
        1,0,0,0,457,458,1,0,0,0,458,460,5,46,0,0,459,461,7,0,0,0,460,459,
        1,0,0,0,461,462,1,0,0,0,462,460,1,0,0,0,462,463,1,0,0,0,463,473,
        1,0,0,0,464,466,7,1,0,0,465,467,7,2,0,0,466,465,1,0,0,0,466,467,
        1,0,0,0,467,469,1,0,0,0,468,470,7,0,0,0,469,468,1,0,0,0,470,471,
        1,0,0,0,471,469,1,0,0,0,471,472,1,0,0,0,472,474,1,0,0,0,473,464,
        1,0,0,0,473,474,1,0,0,0,474,136,1,0,0,0,475,476,7,0,0,0,476,138,
        1,0,0,0,477,478,7,2,0,0,478,140,1,0,0,0,479,485,3,143,71,0,480,484,
        3,143,71,0,481,484,3,137,68,0,482,484,5,39,0,0,483,480,1,0,0,0,483,
        481,1,0,0,0,483,482,1,0,0,0,484,487,1,0,0,0,485,483,1,0,0,0,485,
        486,1,0,0,0,486,142,1,0,0,0,487,485,1,0,0,0,488,489,7,3,0,0,489,
        144,1,0,0,0,490,492,7,4,0,0,491,490,1,0,0,0,492,493,1,0,0,0,493,
        491,1,0,0,0,493,494,1,0,0,0,494,495,1,0,0,0,495,496,6,72,0,0,496,
        146,1,0,0,0,497,498,5,47,0,0,498,499,5,47,0,0,499,503,1,0,0,0,500,
        502,8,5,0,0,501,500,1,0,0,0,502,505,1,0,0,0,503,501,1,0,0,0,503,
        504,1,0,0,0,504,506,1,0,0,0,505,503,1,0,0,0,506,507,6,73,1,0,507,
        148,1,0,0,0,12,0,446,451,456,462,466,471,473,483,485,493,503,2,6,
        0,0,0,1,0
    ]

class dslLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    FLOW = 1
    ARROW = 2
    TRANSFORMER = 3
    IN = 4
    OUT = 5
    BACKWARD = 6
    FORWARD = 7
    INTT = 8
    FLOATT = 9
    BOOL = 10
    POLYEXP = 11
    ZONOEXP = 12
    NEURON = 13
    LIST = 14
    DOT = 15
    COMMA = 16
    PLUS = 17
    MINUS = 18
    MULT = 19
    DIV = 20
    AND = 21
    OR = 22
    LT = 23
    EQ = 24
    EQQ = 25
    NEQ = 26
    GT = 27
    LEQ = 28
    GEQ = 29
    NOT = 30
    LPAREN = 31
    RPAREN = 32
    LSQR = 33
    RSQR = 34
    LBRACE = 35
    RBRACE = 36
    SEMI = 37
    QUES = 38
    COLON = 39
    IF = 40
    TRAV = 41
    SUM = 42
    LEN = 43
    AVG = 44
    SUB = 45
    MAP = 46
    DOTT = 47
    ARGMIN = 48
    ARGMAX = 49
    MIN = 50
    MAX = 51
    WEIGHT = 52
    BIAS = 53
    LAYER = 54
    AFFINE = 55
    RELU = 56
    MAXPOOL = 57
    SIGMOID = 58
    TANH = 59
    SHAPE = 60
    FUNC = 61
    EPSILON = 62
    TRUE = 63
    FALSE = 64
    CURR = 65
    PREV = 66
    IntConst = 67
    FloatConst = 68
    VAR = 69
    WS = 70
    LineComment = 71

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'flow'", "'->'", "'transformer'", "'in'", "'out'", "'backward'", 
            "'forward'", "'Int'", "'Float'", "'Bool'", "'PolyExp'", "'ZonoExp'", 
            "'Neuron'", "'List'", "'.'", "','", "'+'", "'-'", "'*'", "'/'", 
            "'and'", "'or'", "'<'", "'='", "'=='", "'!='", "'>'", "'<='", 
            "'>='", "'!'", "'('", "')'", "'['", "']'", "'{'", "'}'", "';'", 
            "'?'", "':'", "'if'", "'traverse'", "'sum'", "'len'", "'avg'", 
            "'sub'", "'map'", "'dot'", "'argmin'", "'argmax'", "'min'", 
            "'max'", "'weight'", "'bias'", "'layer'", "'Affine'", "'Relu'", 
            "'Maxpool'", "'Sigmoid'", "'Tanh'", "'def Shape as'", "'func'", 
            "'eps'", "'true'", "'false'", "'curr'", "'prev'" ]

    symbolicNames = [ "<INVALID>",
            "FLOW", "ARROW", "TRANSFORMER", "IN", "OUT", "BACKWARD", "FORWARD", 
            "INTT", "FLOATT", "BOOL", "POLYEXP", "ZONOEXP", "NEURON", "LIST", 
            "DOT", "COMMA", "PLUS", "MINUS", "MULT", "DIV", "AND", "OR", 
            "LT", "EQ", "EQQ", "NEQ", "GT", "LEQ", "GEQ", "NOT", "LPAREN", 
            "RPAREN", "LSQR", "RSQR", "LBRACE", "RBRACE", "SEMI", "QUES", 
            "COLON", "IF", "TRAV", "SUM", "LEN", "AVG", "SUB", "MAP", "DOTT", 
            "ARGMIN", "ARGMAX", "MIN", "MAX", "WEIGHT", "BIAS", "LAYER", 
            "AFFINE", "RELU", "MAXPOOL", "SIGMOID", "TANH", "SHAPE", "FUNC", 
            "EPSILON", "TRUE", "FALSE", "CURR", "PREV", "IntConst", "FloatConst", 
            "VAR", "WS", "LineComment" ]

    ruleNames = [ "FLOW", "ARROW", "TRANSFORMER", "IN", "OUT", "BACKWARD", 
                  "FORWARD", "INTT", "FLOATT", "BOOL", "POLYEXP", "ZONOEXP", 
                  "NEURON", "LIST", "DOT", "COMMA", "PLUS", "MINUS", "MULT", 
                  "DIV", "AND", "OR", "LT", "EQ", "EQQ", "NEQ", "GT", "LEQ", 
                  "GEQ", "NOT", "LPAREN", "RPAREN", "LSQR", "RSQR", "LBRACE", 
                  "RBRACE", "SEMI", "QUES", "COLON", "IF", "TRAV", "SUM", 
                  "LEN", "AVG", "SUB", "MAP", "DOTT", "ARGMIN", "ARGMAX", 
                  "MIN", "MAX", "WEIGHT", "BIAS", "LAYER", "AFFINE", "RELU", 
                  "MAXPOOL", "SIGMOID", "TANH", "SHAPE", "FUNC", "EPSILON", 
                  "TRUE", "FALSE", "CURR", "PREV", "IntConst", "FloatConst", 
                  "Digit", "Sign", "VAR", "Nondigit", "WS", "LineComment" ]

    grammarFileName = "dsl.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.12.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


